/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

/**
 *
 * @author MK
 */
public class Rentagrement extends javax.swing.JFrame {

    /**
     * Creates new form Rentagrement
     */
    public Rentagrement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jScrollPane2.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setText("jCheckBox1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("EQUIPMENT RENTAL AGREEMENT\n\nI. THE PARTIES. This Equipment Rental Agreement (“Agreement”) is made on this [DATE], by and between:\n\nLessor: [LESSOR'S NAME] with a mailing address of [LESSOR'S MAILING ADDRESS] (“Lessor”), and\n\nLessee: [LESSEE'S NAME] with a mailing address of [LESSEE'S MAILING ADDRESS] (“Lessee”).\n\nLessor and Lessee are each referred to herein as a “Party” and collectively as the \"Parties.\"\n\nII. EQUIPMENT DESCRIPTION. The Lessor hereby leases to Lessee the following equipment: [DESCRIPTION OF EQUIPMENT]\n\nIII.\n\nHereinafter known as the “Equipment.”\n\nIV. LEASE TYPE. This Agreement shall be considered a: (check one)\n\n☐ - Fixed Lease. The Lessee shall lease the Equipment starting on [START DATE], and end on [END DATE] (“Lease Term”). At the end of the Lease Term and no renewal is made, the Lessee: (check one)\n\n☐ - May continue to lease the Equipment under the same terms of this Agreement under a month-to-month arrangement.\n\n☐ - Must return the Equipment to the Lessor.\n\n☐ - Month-to-Month Lease. The Lessee shall be allowed to lease the Equipment on a month-to-month arrangement starting on [START DATE], and ending upon notice of [#] days from either Party to the other Party (“Lease Term”).\n\nV. RENT. The Lessee agrees to pay the Lessor $[RENT AMOUNT] for leasing the Equipment (“Rent”) that shall be paid: (check one)\n\n☐ - For the Total Amount.\n\n☐ - per Month.\n\n☐ - per Week\n\n☐ - per Day\n\n☐ - Other. [OTHER]\n\nVI. RENT INSTRUCTIONS. Rent shall be paid by the Lessee to the Lessor in the following manner: [RENT PAYMENT INSTRUCTIONS]\n\nVII. LATE CHARGES. If any amount of Rent is late under this Agreement of more than [#] day(s) late, the Lessee will be obligated to pay a late fee of $[LATE CHARGE FEE] for each:\n\n☐ - Occurrence that Rent is Late\n\n☐ - Day that Rent is late.\n\n☐ - Other. [OTHER]\n\nVIII. NON-SUFFICIENT FUNDS. The Lessee shall be charged $[NSF FEE] for each check that is returned to the Lessor for lack of sufficient funds.\n\nIX. SECURITY DEPOSIT. Prior to taking possession of the Equipment, the Lessee shall:\n\n☐ - Be required to pay a deposit. The Lessee will be obligated to pay $[SECURITY DEPOSIT AMOUNT] (“Security Deposit”) for the performance by the Lessee under this Agreement for damages caused by the Lessee or Lessee’s agents to the Equipment during the Lease Term. In addition, the Security Deposit may be applied to any amount owed by the Lessee to the Lessor.\n\n☐ - NOT be required to pay a deposit (“Security Deposit”).\n\nX. DELIVERY OF EQUIPMENT. The delivery of the Equipment to the Lessee at the start of the Lease Term and returning to the Lessor at the end of the Lease Term shall be the responsibility of the: (check one)\n\n☐ - Lessor\n\n☐ - Lessee\n\n☐ - Shared between the Parties.\n\nXI. OPTION TO PURCHASE. During the Lease Term, the Lessee shall: (check one):\n\n☐ - Have the option to purchase the Equipment in its entirety for $[PURCHASE PRICE]. After payment has been made, title and possession shall revert immediately to the Lessee.\n\n☐ - NOT have the option to purchase the Equipment.\n\nXII. REPAIRS AND MAINTENANCE. If for any reason the Equipment shall need repairs or maintenance due to wear-and-tear, the following Party shall be responsible: (check one)\n\n☐ - Lessor\n\n☐ - Lessee\n\n☐ - Shared between the Parties.\n\nXIII. INSURANCE REQUIREMENT. The Lessor shall require that the Lessee: (check one)\n\n☐ - Have insurance of the following types in order to rent the Equipment: (check all that apply)\n\n☐ - Disability Insurance. The Lessee shall be required to maintain liability insurance of at least $[ENTER AMOUNT] for workers and other persons that may be operating, handling, or transporting the Equipment during the Lease Term. Such insurance is intended to indemnify and hold harmless the Lessor from any and all wrongdoing in connection with the injury of any person in the operation of the Equipment.\n\n☐ - Casualty Insurance. The Lessee shall be required to insure the Equipment in an amount of at least $[ENTER AMOUNT] for its damage or replacement.\n\n☐ - Other. [ENTER OTHER INSURANCE]\n\n☐ - NOT be required to have or hold insurance on the Equipment. Although, the Lessor shall be held harmless and indemnified from any and all wrongdoing in connection with any injury of any person in the operation of the Equipment.\n\nXIV. ACCEPTANCE OF EQUIPMENT. The Lessee shall inspect each item and part of the Equipment upon delivery and pursuant to this Agreement. The Lessee shall have twenty-four (24) hours from the delivery date to inform the Lessor of any discrepancies. If for any reason the Lessee claims the Equipment was not the same as described under this Agreement, the Lessee shall be able to return the Equipment and obtain a full refund for any Rent, Security Deposit, and any other payments made.\n\nXV. NO WARRANTY. The Lessor makes no warranties, expressed or implied, as to the equipment leased. The Lessee assumes responsibility for the condition of the Equipment.\n\nXVI. RISK OF LOSS OR DAMAGE. The Lessee assumes all risk of loss or damage to the Equipment from any cause and agrees to return it to the Lessor in the condition received, with the exception of wear and tear, unless otherwise provided in this Agreement.\n\na.) Damaged or Lost Equipment. Unless otherwise provided in this Agreement, if the equipment is damaged or lost, the Lessor shall have the option of requiring the Lessee to either repair the Equipment to a state of good working order or to replace the Equipment with like-equipment and in equal condition. The final decision for approval of any lost or damaged Equipment will be ultimately up to the Lessor.\n\nXVII. TAXES AND FEES. During the Lease Term, the Lessee shall be responsible and be required to pay any applicable taxes, assessments, licenses,\n\nregistration, or any other fees associated with the handling and operation of the Equipment.\n\nXVIII. DEFAULT. The occurrence of any of the following shall constitute a default under this Agreement:\n\na.) Failure of Payment. The failure of the Lessee to make a required payment under this Agreement;\n\nb.) Violation of Agreement. The violation of any provision of this Agreement that is not corrected within five (5) business days after written notice has been received;\n\nc.) Bankruptcy. The insolvency or bankruptcy of the Lessee; and\n\nd.) Seizure. The subjection of any of the Lessee’s property to any levy, seizure, assignment, application, or sale for or by any creditor or government agency.\n\nXIX. RIGHTS UNDER DEFAULT. If the Lessee shall default under this Agreement, and without notice to or demand on the Lessee, the Lessor may take possession of the Equipment as provided by law with the right to deduct the costs of recovery, including any attorney’s fees and legal costs, in addition to any repair or other costs to obtain the Equipment and bring to the same condition as the Lessee received upon initial delivery.\n\nXX. ASSIGNMENT. The Lessee is strictly prohibited from assigning or subletting the Equipment in any manner unless written consent is given by the Lessor. In addition, the Equipment may not be used by any person or associate other than the Lessee and their agents, employees, and subcontractors.\n\nXXI. SEVERABILITY. If any portion of this Agreement shall be held invalid or unenforceable for any reason, the remaining provisions shall continue to be valid and enforceable. If a court finds that any provision of this Agreement is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision shall be deemed to be written, construed, and enforced as so limited.\n\nXXII. GOVERNING LAW. This Agreement shall be construed and governed in accordance with the laws located in the State of [STATE].\n\nXXIII. ENTIRE AGREEMENT. This Agreement constitutes the entire agreement between the Parties. No modification or amendment of this Agreement shall be effective unless in writing and signed by both Parties. This Agreement replaces any and all prior agreements made between the Parties.\n\nXXIV. EXECUTION. Lessee and Lessor each represent and warrant to the other that each person executing this Agreement on behalf of each party is duly authorized to execute and deliver this Agreement on behalf of that party.");
        jScrollPane1.setViewportView(jTextArea1);

        jCheckBox2.setText("I accrept term and conditions.");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Security amount to be paid:");

        jTextField1.setText("Security amount");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Proceed to payment");

        jMenu1.setText("Construtease");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Rent Agreement");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rentagrement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rentagrement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rentagrement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rentagrement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rentagrement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
